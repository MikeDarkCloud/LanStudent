#全局配置
#user  nobody;
worker_processes  2; 	#nginx要开启的工作进程数量，不超过CPU core个数

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

worker_rlimit_nofile 1024;	#用于指定一个进程可以打开最多文件数量的描述
##注意：此值不能大于操作系统最大打开文件数，修改/etc/security/limits.conf文件
##注意：设置了这个后，修改worker_connections值时，是不能超过worker_rlimit_nofile的这个值。


# nginx工作模式配置，一般配置Nginx连接的特性
events {
    use epoll;		#配置指定的线程轮询方法-异步非阻塞
    worker_connections  1024;	#一个工作进程的最大连接数
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    
    #开启gzip压缩配置，可以减少发送数据量	
    gzip on;   
    gzip_min_length  1k;      #设置对数据启用压缩的最小字节数
    gzip_buffers     4 16k;   #设置压缩所需要的缓冲区大小
    gzip_http_version 1.1;    #识别http协议版本，默认1.0协议下不开启压缩
    gzip_comp_level 2;        #设置gzip压缩级别，级别越底压缩速度越快文件压缩比越小，反之速度越慢文件压缩比越大
    gzip_types       text/plain application/x-javascript text/css application/xml;  #设置需要压缩的数据格式 
    gzip_vary on;	#是否在http header中添加Vary: Accept-Encoding，建议开启
	
    upstream tomcats {
	#负载均衡策略
	#none 轮询（默认策略，权重由weight决定,不设置表示权重一致）
	#ip_hash
	#fair
	#url_hash
	server 192.168.137.86:8080;
	server 192.168.137.118:8080;
	
	#分配权重,第一台流量占总流量的3/4，第二台流量占总流量1/4
	#server 192.168.137.86:8080 weight=3;
	#server 192.168.137.118:8080 weight=1;
	
	#max_fails:失败最大次数，超过失败最大次数暂停服务,默认为1
	#fail_timeout: 当达到最大失败次数，暂停指定的时间之后重新发起请求
	#server 192.168.137.118:8080 weight=2 max_fails=3 fail_timeout=30s;

	#backup:备份机器，非备份机都挂掉才启用
	#server 192.168.137.86:8080 backup;

	#down:停机标志，不会被访问，用于
	#server 192.168.137.86:8080 down;
	}

    #虚拟主机，一个http中可配置多个虚拟主机
    server {
        listen       80;	#监听端口
        server_name  localhost; #虚拟主机名称，可为IP、域名

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
	
	#配置反向代理，负载均衡
        location / {
            #root   html;
            index  index.html index.htm;  #web站点主页
	    #proxy_pass http://192.168.137.118:8080;
	    proxy_pass http://tomcats; #配置反向代理，负载均衡
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
